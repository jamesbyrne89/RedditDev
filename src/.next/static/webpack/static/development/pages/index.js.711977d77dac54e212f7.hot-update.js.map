{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.711977d77dac54e212f7.hot-update.js","sources":["webpack:///./components/Home.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\nimport Layout from './Layout';\r\nimport Header from './Header';\r\nimport Sidebar from './Sidebar';\r\nimport Loader from './Loader';\r\nimport Card from './Card';\r\nimport { endpoints } from '../lib/subreddits';\r\nimport { constants, sizes } from '../styles/constants';\r\nimport { filterPostsCallback, sortByNewest } from '../lib/utils';\r\n\r\nconst CardsContainer = styled.main`\r\n    -webkit-column-count: 4;\r\n    column-count: 4;\r\n    -webkit-column-gap: 2.5em;\r\n    column-gap: 2.5em;\r\n    border-top: solid 1px ${constants.text_grey_mid_two};\r\n    padding-top: 1.25em;\r\n    padding-bottom: 1em;\r\n    width: 85%;\r\n    margin: 2rem auto;\r\n    margin-left: calc(7.5% + 2rem);\r\n    @media (max-width: ${sizes.desktop_lg}px) {\r\n      column-gap: 1.5rem;\r\n    }\r\n@media (max-width: ${sizes.desktop_md}px) {\r\n      column-count: 3;\r\n    }\r\n    @media (max-width: ${sizes.desktop_sm}px) {\r\n      column-count: 2;\r\n    }\r\n    @media (max-width: ${sizes.tablet}px) {\r\n      column-gap: 1rem;\r\n      width: 90%;\r\n      margin-left: calc(5% + 2rem);\r\n    }\r\n    @media (max-width: ${sizes.mobile}px) {\r\n      column-count: 1;\r\n      width: 95%;\r\n      margin-left: auto;\r\n    }\r\n    &::after {\r\n        content: '';\r\n        width: 100%;\r\n        position: fixed;\r\n        height: 40px;\r\n        background: -webkit-gradient(linear, left top, left bottom, from(rgba(236, 238, 241, 0.001)), to(white));\r\n        background: linear-gradient(rgba(236, 238, 241, 0.001), white);\r\n        pointer-events: none;\r\n        bottom: 0;\r\n        left: 0;\r\n    }\r\n\r\n`;\r\n\r\ninterface IProps {}\r\n\r\ninterface IState { posts: array, loading: boolean }\r\n\r\nclass Home extends React.Component<IProps, IState> {\r\n  state = { posts: [], loading: true };\r\n\r\n  getPosts = async (filterFunc: Function) => {\r\n    const data = await axios.all(\r\n      Object.keys(endpoints).map(url => axios.get(endpoints[url])),\r\n    );\r\n    const cleaned: array = data.reduce(\r\n      (acc, curr): array => {\r\n        return [ ...curr.data.data.children, ...acc ];\r\n      },\r\n      [],\r\n    );\r\n\r\n    const postsSortedByNewest: Array<object> = cleaned.sort(sortByNewest);\r\n\r\n    this.setState({ posts: postsSortedByNewest, loading: false });\r\n    console.log(postsSortedByNewest.slice(0, 20));\r\n    console.log(this.state.posts.filter(filterPostsCallback('hello')));\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getPosts();\r\n  }\r\n\r\n  onSearchSubmit = (searchTerm: string) => {\r\n    console.log(searchTerm);\r\n  };\r\n\r\n  render() {\r\n    const { loading, posts } = this.state;\r\n    return (\r\n      <Layout title=\"redditDev - the best of frontend development on Reddit\">\r\n        <Header onSearchSubmit={this.onSearchSubmit} />\r\n        <Sidebar />\r\n        <CardsContainer>\r\n          {\r\n            loading\r\n              ? <Loader />\r\n              : posts.map(\r\n                post => (\r\n                  <Card\r\n                    key={post.data.id}\r\n                    subName={post.data.subreddit_name_prefixed}\r\n                    postData={post.data}\r\n                    title={post.data.title}\r\n                    url={post.data.url}\r\n                    permalink={post.data.permalink}\r\n                    num_comments={post.data.num_comments}\r\n                    created_utc={post.data.created_utc}\r\n                  />\r\n                ),\r\n              )\r\n          }\r\n        </CardsContainer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AA+CA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAHA;AACA;AAGA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAqBA;AACA;AACA;AACA;;;;;;AAPA;AACA;AACA;;;AAMA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAiBA;;;;AAzDA;AACA;AA2DA;;;;A","sourceRoot":""}