{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.3ec5b22d054080455792.hot-update.js","sources":["webpack:///./components/Card.tsx","webpack:///./components/Home.tsx","webpack:///./components/Loader.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport { constants } from '../styles/constants';\r\nimport {\r\n  mapSubsToColours,\r\n  getHostname,\r\n  numCommentsText,\r\n  getTimeAgo,\r\n  debounce,\r\n} from '../lib/utils';\r\n\r\nconst StyledCard = styled.article`\r\n    margin: 0 0 1.25em 0;\r\n    width: 100%;\r\n    background: white;\r\n    break-inside: avoid;\r\n    overflow-wrap: break-word;\r\n    padding: 1em 0.75em;\r\n    -webkit-transform: translateY(200px) scale(0.9);\r\n    transform: translateY(200px) scale(0.9);\r\n    opacity: 0;\r\n    -webkit-transition: opacity 1s ease-in-out 0s, -webkit-transform 0.7s cubic-bezier(0.165, 0.84, 0.44, 1) 0s;\r\n    transition: opacity 1s ease-in-out 0s, -webkit-transform 0.7s cubic-bezier(0.165, 0.84, 0.44, 1) 0s;\r\n    transition: transform 0.7s cubic-bezier(0.165, 0.84, 0.44, 1) 0s, opacity 1s ease-in-out 0s;\r\n    transition: transform 0.7s cubic-bezier(0.165, 0.84, 0.44, 1) 0s, opacity 1s ease-in-out 0s, -webkit-transform 0.7s cubic-bezier(0.165, 0.84, 0.44, 1) 0s;\r\n    -webkit-column-break-inside: avoid;\r\n    ${({ isAnimated }) => isAnimated && `transform: translateY(0) scale(1);\r\n      opacity: 1;`}\r\n`;\r\n\r\nconst SubRedditName = styled.h3`\r\n    font-family: ${constants.sansSerif};\r\n    padding: 0.5em 0.75em;\r\n    margin: 0;\r\n    display: inline-block;\r\n    font-weight: 700;\r\n    text-transform: uppercase;\r\n    font-size: 0.75rem;\r\n    color: #fff;\r\n    letter-spacing: 1px;\r\n  background: ${props => constants[`subreddit_colour_${props.colour}`]};\r\n   \r\n`;\r\n\r\nconst PostTitle = styled.h2`\r\n    padding: 1.5em 0;\r\n    font-size: 1.25rem;\r\n    margin: 0;\r\n    -webkit-transition: all 0.15s;\r\n    transition: all 0.15s;\r\n    text-align: left;\r\n    a {\r\n        font-family: 'Tiempos Headline', georgia, serif;\r\n        font-weight: 700;\r\n        color: ${constants.text_grey_dark};\r\n        text-decoration: none;\r\n        line-height: 1.3;\r\n        max-width: 100%;\r\n        -webkit-box-decoration-break: clone;\r\n        box-decoration-break: clone;\r\n        -webkit-transition: all 0.15s;\r\n        transition: all 0.15s;\r\n    }\r\n    a:hover {\r\n        color: #000 !important;\r\n        border-bottom: solid 1px #000;\r\n    }\r\n`;\r\n\r\nconst CardFooter = styled.footer`\r\n    font-weight: 400;\r\n    display: -webkit-box;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -webkit-box-pack: start;\r\n    -ms-flex-pack: start;\r\n    justify-content: flex-start;\r\n    -webkit-box-align: center;\r\n    -ms-flex-align: center;\r\n    align-items: center;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    font-size: 0.75rem;\r\n    letter-spacing: 0.02em;\r\n    color: ${constants.text_grey_mid_two};\r\n.post-comments {\r\n    font-family: ${constants.sansSerif};\r\n    display: block;\r\n    text-align: left;\r\n    white-space: nowrap;\r\n    padding: 0 0.75em;\r\n    -webkit-transition: all 0.15s;\r\n    transition: all 0.15s;\r\n    a {\r\n        -webkit-transition: all 0.15s;\r\n        transition: all 0.15s;\r\n        cursor: pointer;\r\n    }\r\n    a:hover {\r\n        color: ${constants.nearBlack} !important;\r\n        padding-bottom: 0.125em;\r\n        border-bottom: solid 1px;\r\n        -webkit-transition: all 0.1s;\r\n        transition: all 0.1s;\r\n    }\r\n}\r\n.post-comments, .short-url, .timestamp {\r\n  padding: 0 0.25em;\r\n}\r\n`;\r\n\r\nconst Bar = styled.span`\r\nfont-size: 0.875em;\r\n`;\r\n\r\ntype Props = {\r\n  subName: string,\r\n  title: string,\r\n  url: string,\r\n  permalink: string,\r\n  num_comments: number,\r\n  created_utc: number,\r\n};\r\n\r\ntype State = { isAnimated: boolean };\r\n\r\nclass Card extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.cardRef = React.createRef();\r\n    this.state = { isAnimated: false };\r\n  }\r\n  checkVisible = (e: any) => {\r\n    if (this.state.isAnimated) {\r\n      return false;\r\n    }\r\n    const card = this.cardRef.current;\r\n    let scrollInAt;\r\n    window.scrollY < 0\r\n      ? scrollInAt = window.innerHeight\r\n      : scrollInAt = window.scrollY + window.innerHeight -\r\n        window.innerHeight * 0.1;\r\n    const isShowing = scrollInAt > card.offsetTop;\r\n    const isNotShowing = window.scrollY < scrollInAt;\r\n    if (isShowing && isNotShowing && !this.state.isAnimated) {\r\n      this.setState({ isAnimated: true });\r\n      window.removeEventListener('scroll', this.onWindowScroll);\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.onWindowScroll();\r\n    window.addEventListener('scroll', this.onWindowScroll);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.onWindowScroll();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.onWindowScroll);\r\n  }\r\n\r\n  onWindowScroll = debounce(e => this.checkVisible(e), 150);\r\n  render() {\r\n    const {\r\n      subName,\r\n      title,\r\n      url,\r\n      permalink,\r\n      num_comments,\r\n      created_utc,\r\n    } = this.props;\r\n    const { isAnimated } = this.state;\r\n    return (\r\n      <StyledCard ref={this.cardRef} isAnimated={isAnimated}>\r\n        <SubRedditName colour={mapSubsToColours(subName)}>\r\n          {subName}\r\n        </SubRedditName>\r\n        <PostTitle>\r\n          <a href={url} target=\"blank\">\r\n            {title}\r\n          </a>\r\n        </PostTitle>\r\n        <CardFooter>\r\n          <span className=\"short-url\">{getHostname(url)}</span><Bar>|</Bar>\r\n          <time className=\"timestamp\">{getTimeAgo(created_utc)}</time>\r\n          <Bar>|</Bar>\r\n          <span className=\"post-comments\">\r\n            <a href={`https://reddit.com${permalink}`} target=\"blank\">\r\n              {numCommentsText(num_comments)}\r\n            </a>\r\n          </span>\r\n        </CardFooter>\r\n      </StyledCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import * as React from 'react';\r\n\r\nimport { constants, sizes } from '../styles/constants';\r\n\r\nimport Card from './Card';\r\nimport Header from './Header';\r\nimport Layout from './Layout';\r\nimport Loader from './Loader';\r\nimport Sidebar from './Sidebar';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst CardsContainer = styled.main`\r\n    -webkit-column-count: 4;\r\n    column-count: 4;\r\n    -webkit-column-gap: 2.5em;\r\n    column-gap: 2.5em;\r\n    border-top: solid 1px ${constants.text_grey_mid_two};\r\n    padding-top: 1.25em;\r\n    padding-bottom: 1em;\r\n    width: 85%;\r\n    margin: 2rem auto;\r\n    margin-left: calc(7.5% + 2rem);\r\n    @media (max-width: ${sizes.desktop_lg}px) {\r\n      column-gap: 1.5rem;\r\n    }\r\n@media (max-width: ${sizes.desktop_md}px) {\r\n      column-count: 3;\r\n    }\r\n    @media (max-width: ${sizes.desktop_sm}px) {\r\n      column-count: 2;\r\n    }\r\n    @media (max-width: ${sizes.tablet}px) {\r\n      column-gap: 1rem;\r\n      width: 90%;\r\n      margin-left: calc(5% + 2rem);\r\n    }\r\n    @media (max-width: ${sizes.mobile}px) {\r\n      column-count: 1;\r\n      width: 95%;\r\n      margin-left: auto;\r\n    }\r\n    &::after {\r\n        content: '';\r\n        width: 100%;\r\n        position: fixed;\r\n        height: 40px;\r\n        background: -webkit-gradient(linear, left top, left bottom, from(rgba(236, 238, 241, 0.001)), to(white));\r\n        background: linear-gradient(rgba(236, 238, 241, 0.001), white);\r\n        pointer-events: none;\r\n        bottom: 0;\r\n        left: 0;\r\n    }\r\n\r\n`;\r\n\r\nclass Home extends React.Component<IProps, IState> {\r\n  render() {\r\n    const { loading, posts } = this.props;\r\n    return (\r\n      <Layout title=\"redditDev - the best of frontend development on Reddit\">\r\n        <Header onSearchSubmit={this.onSearchSubmit} />\r\n        <Sidebar />\r\n        <CardsContainer>\r\n          {\r\n            loading\r\n              ? <Loader />\r\n              : posts.map(\r\n                (post: object): any => (\r\n                  <Card\r\n                    key={post.data.id}\r\n                    subName={post.data.subreddit_name_prefixed}\r\n                    postData={post.data}\r\n                    title={post.data.title}\r\n                    url={post.data.url}\r\n                    permalink={post.data.permalink}\r\n                    num_comments={post.data.num_comments}\r\n                    created_utc={post.data.created_utc}\r\n                  />\r\n                ),\r\n              )\r\n          }\r\n        </CardsContainer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledLoader = styled.div`\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-pack: center;\r\n  -ms-flex-pack: center;\r\n  justify-content: center;\r\n  width: 3.5em;\r\n  height: 2rem;\r\n  color: $nearBlack;\r\n  font-family: $sansSerif;\r\n\r\n  font-size: 2rem;\r\n  opacity: 0.8;\r\n  margin: auto;\r\n  position: absolute;\r\n  top: calc(30vh - 180px);\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\nspan {\r\n  display: inline-block;\r\n  -webkit-animation: pulse 0.4s alternate infinite ease-in-out;\r\n  animation: pulse 0.4s alternate infinite ease-in-out;\r\n}\r\nspan:nth-child(odd) {\r\n  -webkit-animation-delay: 0.4s;\r\n  animation-delay: 0.4s;\r\n}\r\n@-webkit-keyframes pulse {\r\n  to {\r\n    -webkit-transform: scale(0.8);\r\n    transform: scale(0.8);\r\n    opacity: 0.5;\r\n  }\r\n}\r\n@keyframes pulse {\r\n  to {\r\n    -webkit-transform: scale(0.8);\r\n    transform: scale(0.8);\r\n    opacity: 0.5;\r\n  }\r\n}\r\n`;\r\n\r\nconst Loader = () => (\r\n  <StyledLoader>\r\n    <span>{`{`}</span>\r\n    <span>{`}`}</span>\r\n  </StyledLoader>\r\n);\r\n\r\nexport default Loader;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAUA;AAAA;AAIA;AAAA;AAAA;AAAA;AAyBA;AAAA;AAAA;AAAA;AA0CA;AAAA;AAAA;AAAA;AACA;AAcA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAtBA;AAoCA;AAAA;AACA;AAnCA;AACA;AAAA;AAAA;AAHA;AAIA;AACA;;;AAkBA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;AAtEA;AACA;AAwEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AA2CA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAiBA;;;;AA7BA;AACA;AA+BA;;;;;;;;;;;;;;;;;ACxFA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AA4CA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AACA;AAMA;;;;A","sourceRoot":""}