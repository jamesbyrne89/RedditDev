{"version":3,"file":"static\\development\\pages\\_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/styles/constants.ts","webpack:///./db/firestore.js","webpack:///./lib/subreddits.ts","webpack:///./lib/utils.ts","webpack:///./pages/_app.tsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"axios\"","webpack:///external \"firebase/app\"","webpack:///external \"firebase/firestore\"","webpack:///external \"next/app\"","webpack:///external \"react\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","interface IConstants {\r\n  sansSerif: string,\r\n  serif: string,\r\n  /* Colours */\r\n  nearBlack: string,\r\n  highlightColourOne: string,\r\n  background_grey: string,\r\n  text_grey_dark: string,\r\n  text_grey_mid_one: string,\r\n  text_grey_mid_two: string,\r\n  subreddit_colour_one: string,\r\n  subreddit_colour_two: string,\r\n  subreddit_colour_three: string,\r\n  subreddit_colour_four: string,\r\n  subreddit_colour_five: string,\r\n  subreddit_colour_six: string,\r\n  subreddit_colour_seven: string,\r\n  subreddit_colour_eight: string,\r\n  subreddit_colour_nine: string,\r\n  subreddit_colour_ten: string,\r\n}\r\n\r\ninterface ISizes {\r\n  desktop_lg: number,\r\n  desktop_md: number,\r\n  desktop_sm: number,\r\n  tablet: number,\r\n  mobile: number,\r\n}\r\n\r\ninterface ITheme {}\r\n\r\nexport const constants: IConstants = {\r\n  /* Typography */\r\n  sansSerif: `'space mono',\r\nhelvetica,\r\narial,\r\nsans-serif;`,\r\n  serif: `'Tiempos Headline',\r\ngeorgia,\r\nserif`,\r\n  /* Colours */\r\n  nearBlack: '#24292e',\r\n  highlightColourOne: '#fdf522',\r\n  background_grey: '#eceef1',\r\n  text_grey_dark: '#302F2F',\r\n  text_grey_dark_two: '#2d303a',\r\n  text_grey_mid_one: '#c9c9c9',\r\n  text_grey_mid_two: '#ccc',\r\n  subreddit_colour_one: '#CAD3C8',\r\n  subreddit_colour_two: '#3B3B98',\r\n  subreddit_colour_three: '#EAB543',\r\n  subreddit_colour_four: '#FEA47F',\r\n  subreddit_colour_five: '#ff6b81',\r\n  subreddit_colour_six: '#55E6C1',\r\n  subreddit_colour_seven: '#D6A2E8',\r\n  subreddit_colour_eight: '#25CCF7',\r\n  subreddit_colour_nine: '#006266',\r\n  subreddit_colour_ten: '#535c68',\r\n};\r\n\r\nexport const sizes: ISizes = {\r\n  desktop_lg: 1600,\r\n  desktop_md: 1376,\r\n  desktop_sm: 1024,\r\n  tablet: 768,\r\n  mobile: 576,\r\n};\r\n\r\nexport const lightTheme: ITheme = {\r\n  header_background: '#fff',\r\n  main_background: constants.background_grey,\r\n  font_colour_primary: constants.nearBlack,\r\n  card_background: '#fff',\r\n  button_colour: constants.nearBlack,\r\n  button_hover_colour: '#fff',\r\n};\r\nexport const darkTheme: ITheme = {\r\n  header_background: constants.nearBlack,\r\n  font_colour_primary: '#fff',\r\n  main_background: constants.text_grey_dark_two,\r\n  card_background: constants.nearBlack,\r\n  button_colour: '#fff',\r\n  button_hover_colour: constants.nearBlack,\r\n};\r\n","import firebase from 'firebase/app';\r\nimport firestore from 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: 'AIzaSyBkHyS6BMFlRBww9mZMsTQgMzjp6P9ml6M',\r\n  authDomain: 'redditdev-e11fc.firebaseapp.com',\r\n  databaseURL: 'https://redditdev-e11fc.firebaseio.com',\r\n  projectId: 'redditdev-e11fc',\r\n  storageBucket: 'redditdev-e11fc.appspot.com',\r\n  messagingSenderId: '976173547224',\r\n};\r\n\r\nconst initDB = () => {\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n  }\r\n\r\n  var db = firebase.firestore();\r\n\r\n  return db;\r\n};\r\n\r\nexport default initDB()\r\n","interface Iendpoints {\r\n  [key: string]: string,\r\n  webdev: string,\r\n  web_design: string,\r\n  frontend: string,\r\n  css: string,\r\n  javascript: string,\r\n  react_js: string,\r\n  graphql: string,\r\n  node: string,\r\n}\r\n\r\nexport const endpoints: Iendpoints = {\r\n  webdev: 'https://www.reddit.com/r/webdev.json?',\r\n  web_design: 'https://www.reddit.com/r/web_design.json?',\r\n  frontend: 'https://www.reddit.com/r/frontend.json?',\r\n  css: 'https://www.reddit.com/r/css.json?',\r\n  javascript: 'https://www.reddit.com/r/javascript.json?',\r\n  react_js: 'https://www.reddit.com/r/reactjs.json?',\r\n  graphql: 'https://www.reddit.com/r/graphql.json?',\r\n  node: 'https://www.reddit.com/r/node.json?',\r\n  typescript: 'https://www.reddit.com/r/typescript.json?',\r\n  vue: 'https://www.reddit.com/r/vuejs.json?',\r\n};\r\n","import { IRedditPost } from '../interfaces/index';\r\n\r\nexport function mapSubsToColours(sub: string): string {\r\n  switch (sub.replace('r/', '').toLowerCase()) {\r\n    case 'css':\r\n      return 'one';\r\n    case 'webdev':\r\n      return 'two';\r\n    case 'web_design':\r\n      return 'three';\r\n    case 'typescript':\r\n      return 'four';\r\n    case 'javascript':\r\n      return 'five';\r\n    case 'frontend':\r\n      return 'six';\r\n    case 'graphql':\r\n      return 'seven';\r\n    case 'reactjs':\r\n      return 'eight';\r\n    case 'node':\r\n      return 'nine';\r\n    case 'vuejs':\r\n      return 'ten';\r\n    default:\r\n      return 'one';\r\n  }\r\n}\r\n\r\nexport function getHostname(url: string): string {\r\n  var match = url.match(/:\\/\\/(www[0-9]?\\.)?(.[^/:]+)/i);\r\n  return match[2];\r\n}\r\n\r\nexport function numCommentsText(numComments: number): string {\r\n  return numComments === 1\r\n    ? `${numComments} comment`\r\n    : `${numComments} comments`;\r\n}\r\n\r\n/**\r\n * Convert the UNIX timestamp provided by the API into human-readable format\r\n */\r\nexport function getTimeAgo(timestamp: number): string {\r\n  const d = new Date();\r\n  // Convert the passed timestamp to milliseconds\r\n  const tNowS = Math.floor(d.getTime() / 1000);\r\n  const seconds = tNowS - timestamp;\r\n  const mins = Math.floor(seconds / 60);\r\n  const hours = Math.floor(mins / 60);\r\n  const days = Math.floor(seconds / 3600 / 24);\r\n\r\n  if (days >= 8) {\r\n    return 'A week ago';\r\n  } else if (seconds > 2 * 24 * 3600) {\r\n    return Math.floor(days) + 'd ago';\r\n  } else if (seconds > 24 * 3600) {\r\n    return 'Yesterday';\r\n  } else if (mins > 60) {\r\n    return hours + 'h ago';\r\n  } else if (2 < mins < 60) {\r\n    return mins + 'm ago';\r\n  } else {\r\n    return mins + 'Just now';\r\n  }\r\n}\r\n\r\nexport function debounce(func: Function, wait = 100, immediate?: boolean) {\r\n  let timeout: any;\r\n  return function() {\r\n    let context = this, args = arguments;\r\n    let later = function() {\r\n      timeout = null;\r\n      if (!immediate)\r\n        func.apply(context, args);\r\n    };\r\n    let callNow = immediate && !timeout;\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n    if (callNow)\r\n      func.apply(context, args);\r\n  };\r\n}\r\n\r\nexport function filterPostsCallback(\r\n  searchTerm: string = '',\r\n  subreddits: string[] = [],\r\n): Function {\r\n  return (post: IRedditPost) => {\r\n    const { data } = post;\r\n    return (data.title.includes(searchTerm) || data.url.includes(searchTerm)) &&\r\n      subreddits.includes(data.subreddit);\r\n  };\r\n}\r\n\r\ninterface PostToCheckType { data: { title: string, id: string } }\r\n\r\nexport function isAlreadyFavourite(postToCheck: PostToCheckType): any {\r\n  return (post: IRedditPost) => {\r\n    return postToCheck.data.title === post.data.title &&\r\n      postToCheck.data.id === post.data.id;\r\n  };\r\n}\r\n\r\nexport function sortByNewest(a: any, b: any): number {\r\n  return b.data.created - a.data.created;\r\n}\r\n","import App, { Container } from 'next/app';\r\nimport axios from 'axios';\r\nimport { endpoints } from '../lib/subreddits';\r\nimport { filterPostsCallback, sortByNewest } from '../lib/utils';\r\nimport db from '../db/firestore';\r\nimport { IRedditPost, IFavouritePost } from '../interfaces/index';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { lightTheme, darkTheme } from '../components/styles/constants';\r\n\r\ninterface Props { loading: boolean, posts: IRedditPost[], favourites: [] }\r\n\r\n\r\nconst withTheme = (Component) => {\r\n\r\nreturn <Component />\r\n}\r\nclass MyApp extends App<Props> {\r\n  state = {\r\n    loading: true,\r\n    posts: [],\r\n    filteredPosts: [],\r\n    isFiltered: false,\r\n    favourites: [],\r\n    theme: lightTheme,\r\n  };\r\n  static async getInitialProps({ Component, ctx }: any) {\r\n    let pageProps = { favourites: [] };\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    const data = await axios.all(\r\n      Object.keys(endpoints).map(url => axios.get(endpoints[url])),\r\n    );\r\n    const cleaned: IRedditPost[] = data.reduce(\r\n      (acc: IRedditPost[], curr: any): IRedditPost[] => {\r\n        return [ ...curr.data.data.children, ...acc ];\r\n      },\r\n      [],\r\n    );\r\n    const postsSortedByNewest: IRedditPost[] = cleaned.sort(sortByNewest);\r\n\r\n    return { posts: postsSortedByNewest, ...pageProps };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { posts = [], favourites = [] } = this.props;\r\n    this.setState({ loading: false, posts, favourites });\r\n    db.collection('favourites').onSnapshot(querySnapshot => {\r\n      const favourites = querySnapshot.docs.map(\r\n        doc => ({ doc_id: doc.id, data: doc.data().data }),\r\n      );\r\n      if (favourites.length !== this.state.favourites.length) {\r\n        this.setState({ favourites });\r\n      }\r\n    });\r\n  }\r\n\r\n  filterPosts = (searchTerm = '', subreddits = []) => {\r\n    if (!searchTerm && subreddits.length === 0) {\r\n      return this.setState({\r\n        filteredPosts: this.props.posts,\r\n        isFiltered: false,\r\n      });\r\n    }\r\n    this.setState({ loading: true });\r\n    const filtered = this.props.posts.filter(\r\n      filterPostsCallback(searchTerm, subreddits),\r\n    );\r\n    this.setState({\r\n      filteredPosts: filtered,\r\n      loading: false,\r\n      isFiltered: true,\r\n    });\r\n  };\r\n\r\n  addToFavourites = (postToAdd: IFavouritePost): void => {\r\n    if (postToAdd.doc_id) {\r\n      return this.removeFromFavourites(postToAdd);\r\n    }\r\n    db\r\n      .collection('favourites')\r\n      .add(postToAdd)\r\n      .then(docRef => {\r\n        console.log('added', { ...postToAdd, doc_id: docRef.id });\r\n      })\r\n      .catch(function(error) {\r\n        console.error('Error adding document: ', error);\r\n      });\r\n  };\r\n\r\n  removeFromFavourites = (postToRemove: IFavouritePost): void => {\r\n    db.collection('favourites').doc(postToRemove.doc_id).delete();\r\n  };\r\n\r\n  toggleTheme = () => {\r\n    this.setState({\r\n      theme: this.state.theme == darkTheme ? lightTheme : darkTheme,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { posts, filteredPosts, isFiltered, theme } = this.state;\r\n    const { Component, pageProps } = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <ThemeProvider theme={theme}>\r\n          <Component\r\n            posts={isFiltered ? filteredPosts : posts}\r\n            loading={this.state.loading}\r\n            onSearchSubmit={this.filterPosts}\r\n            onAddToFavourites={this.addToFavourites}\r\n            favourites={this.state.favourites}\r\n            toggleTheme={this.toggleTheme}\r\n            {...pageProps}\r\n          />\r\n        </ThemeProvider>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyApp;\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"axios\");","module.exports = require(\"firebase/app\");","module.exports = require(\"firebase/firestore\");","module.exports = require(\"next/app\");","module.exports = require(\"react\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AA6BA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAtBA;AAwBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAuCA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;AAtDA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;;;;;;;;;AA9FA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;;AACA;AACA;AAAA;AACA;;AAFA;AAGA;AAEA;AACA;AAGA;;AAEA;AAAA;AACA;;;;;;;;;;;;;;;;;;AA1BA;AACA;AAyGA;;;;;;;;;;;;;;;;;;;;;;;AC1HA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}