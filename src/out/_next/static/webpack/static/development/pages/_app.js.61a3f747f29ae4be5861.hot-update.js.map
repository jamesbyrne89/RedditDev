{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.61a3f747f29ae4be5861.hot-update.js","sources":["webpack:///./pages/_app.tsx"],"sourcesContent":["import App, { Container } from 'next/app';\r\nimport axios from 'axios';\r\nimport { endpoints } from '../lib/subreddits';\r\nimport { filterPostsCallback, sortByNewest } from '../lib/utils';\r\nimport db from '../db/firestore';\r\n\r\ninterface Props { loading: boolean, posts: Array }\r\n\r\ninterface IPostToRemove {\r\n  data: {\r\n    created_utc: number,\r\n    id: string,\r\n    num_comments: number,\r\n    permalink: string,\r\n    subreddit_name_prefixed: string,\r\n    title: string,\r\n    url: string,\r\n    doc_id: string,\r\n  },\r\n}\r\n\r\nclass MyApp extends App<Props> {\r\n  state = {\r\n    loading: true,\r\n    posts: [],\r\n    filteredPosts: [],\r\n    isFiltered: false,\r\n    favourites: [],\r\n  };\r\n  static async getInitialProps() {\r\n    const data = await axios.all(\r\n      Object.keys(endpoints).map(url => axios.get(endpoints[url])),\r\n    );\r\n    const cleaned: Array<{}> = data.reduce(\r\n      (acc: any, curr: any): Array<{}> => {\r\n        return [ ...curr.data.data.children, ...acc ];\r\n      },\r\n      [],\r\n    );\r\n    const postsSortedByNewest: Array<object> = cleaned.sort(sortByNewest);\r\n\r\n    return { posts: postsSortedByNewest };\r\n  }\r\n\r\n  getFavourites = () => {\r\n    db.collection('favourites').get().then(querySnapshot => {\r\n      const savedFavourites: object[] = [];\r\n      querySnapshot.forEach(doc => {\r\n        savedFavourites.push({ doc_id: doc.id, ...doc.data() });\r\n      });\r\n      this.setState({ favourites: savedFavourites });\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: false, posts: this.props.posts });\r\n\r\n    this.getFavourites();\r\n  }\r\n\r\n  filterPosts = (searchTerm = '') => {\r\n    if (!searchTerm) {\r\n      return this.setState({\r\n        filteredPosts: this.state.posts,\r\n        isFiltered: false,\r\n      });\r\n    }\r\n    this.setState({ loading: true });\r\n    const filtered = this.state.posts.filter(filterPostsCallback(searchTerm));\r\n    this.setState({\r\n      filteredPosts: filtered,\r\n      loading: false,\r\n      isFiltered: true,\r\n    });\r\n  };\r\n\r\n  addToFavourites = postToAdd => {\r\n    console.log({ postToAdd });\r\n    if (postToAdd.doc_id) {\r\n      return this.removeFromFavourites(postToAdd);\r\n    }\r\n    console.log('safe to add');\r\n    db\r\n      .collection('favourites')\r\n      .add(postToAdd)\r\n      .then(docRef => {\r\n        const newFavourite = { ...postToAdd, doc_id: docRef.id };\r\n        console.log(this);\r\n        this.setState({\r\n          favourites: [ ...this.state.favourites, newFavourite ],\r\n        });\r\n        console.log('Document written with ID: ', docRef.id);\r\n      })\r\n      .catch(function(error) {\r\n        console.error('Error adding document: ', error);\r\n      });\r\n  };\r\n\r\n  removeFromFavourites = (postToRemove: IPostToRemove) => {\r\n    db.collection('favourites').doc(postToRemove.doc_id).delete();\r\n    const newFavouritesList = this.state.favourites.filter(\r\n      fav =>\r\n        postToRemove.data.title !== fav.data.title &&\r\n          postToRemove.data.created_utc !== fav.data.created_utc,\r\n    );\r\n    this.setState({ favourites: newFavouritesList });\r\n  };\r\n\r\n  render() {\r\n    const { posts, filteredPosts, isFiltered } = this.state;\r\n    const { Component, pageProps } = this.props;\r\n    return (\r\n      <Container>\r\n        <Component\r\n          posts={isFiltered ? filteredPosts : posts}\r\n          loading={this.state.loading}\r\n          onSearchSubmit={this.filterPosts}\r\n          onAddToFavourites={this.addToFavourites}\r\n          favourites={this.state.favourites}\r\n          {...pageProps}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyApp;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAgBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAqBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;;;;;;AArDA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;AAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;;;;;;;;;AA7FA;AACA;AAAA;AACA;;AAFA;AAGA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AArBA;AACA;AAwGA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}