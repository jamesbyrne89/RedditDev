{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.49dfde37737ecd810708.hot-update.js","sources":["webpack:///./pages/_app.tsx"],"sourcesContent":["import App, { Container } from 'next/app';\r\nimport axios from 'axios';\r\nimport { endpoints } from '../lib/subreddits';\r\nimport { filterPostsCallback, sortByNewest } from '../lib/utils';\r\nimport db, { auth } from '../db/firestore';\r\nimport { IRedditPost, IFavouritePost } from '../interfaces/index';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { lightTheme, darkTheme } from '../components/styles/constants';\r\n\r\ninterface Props {\r\n  loading: boolean;\r\n  posts: IRedditPost[];\r\n  favourites: [];\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst DISPLAY_PREFERENCE_KEY = 'redditdev-display-mode';\r\n\r\n// const checkAuthAndRedirect = res => {\r\n//   if (res) {\r\n//     res.writeHead(302, {});\r\n//     res.end();\r\n//   } else {\r\n//     Router.push('localhost:3000/login');\r\n//   }\r\n//   return {};\r\n// };\r\n\r\nfunction setupServiceWorker() {\r\n  if ('serviceWorker' in navigator) {\r\n    window.addEventListener('load', function() {\r\n      navigator.serviceWorker\r\n        .register('/service-worker.js', { scope: '/' })\r\n        .then(function(registration) {\r\n          console.log('SW registered: ', registration);\r\n        })\r\n        .catch(function(registrationError) {\r\n          console.log('SW registration failed: ', registrationError);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nclass MyApp extends App<Props> {\r\n  state = {\r\n    loading: true,\r\n    posts: [],\r\n    filteredPosts: [],\r\n    isFiltered: false,\r\n    favourites: [],\r\n    theme: lightTheme,\r\n    themeName: 'light',\r\n    uid: null\r\n  };\r\n\r\n  static async getInitialProps({ Component, ctx }: any) {\r\n    let pageProps = { favourites: [] };\r\n    if (Component.getInitialProps) {\r\n      pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n\r\n    return { pageProps };\r\n  }\r\n\r\n  getFavourites = () => {\r\n    db.collection('users')\r\n      .doc(this.state.uid)\r\n      .collection('favourites')\r\n      .onSnapshot(querySnapshot => {\r\n        const favourites = querySnapshot.docs.map(doc => ({\r\n          doc_id: doc.id,\r\n          data: doc.data().data\r\n        }));\r\n        this.setState({ favourites });\r\n      });\r\n  };\r\n\r\n  getPosts = async () => {\r\n    const data = await axios.all(\r\n      Object.keys(endpoints).map(url => axios.get(endpoints[url]))\r\n    );\r\n    const cleaned: IRedditPost[] = data.reduce(\r\n      (acc: IRedditPost[], curr: any): IRedditPost[] => {\r\n        return [...curr.data.data.children, ...acc];\r\n      },\r\n      []\r\n    );\r\n    const postsSortedByNewest: IRedditPost[] = cleaned.sort(sortByNewest);\r\n    this.setState({ posts: postsSortedByNewest, loading: false });\r\n  };\r\n\r\n  getDisplayPreference = () => {\r\n    const mode = localStorage.getItem(DISPLAY_PREFERENCE_KEY);\r\n    if (mode) {\r\n      this.setState({\r\n        themeName: mode,\r\n        theme: mode === 'dark' ? darkTheme : lightTheme\r\n      });\r\n    }\r\n  };\r\n\r\n  setDisplayPreference = mode => {\r\n    localStorage.setItem(DISPLAY_PREFERENCE_KEY, mode);\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.getPosts();\r\n    this.getDisplayPreference();\r\n    setupServiceWorker();\r\n\r\n    auth.onAuthStateChanged(user => {\r\n      console.log('Auth state changed.');\r\n      if (user) {\r\n        console.info('*** User is signed in ***', user);\r\n        this.setState({ isAuthenticated: user, uid: user.uid });\r\n        db.collection('users')\r\n          .doc(user.uid)\r\n          .set({\r\n            email: user.email\r\n          });\r\n        this.getFavourites();\r\n      } else {\r\n        console.warn('*** User is signed out ***');\r\n        this.setState({ isAuthenticated: null, uid: null });\r\n        // checkAuthAndRedirect(ctx.res);\r\n      }\r\n    });\r\n  }\r\n\r\n  filterPosts = (searchTerm = '', subreddits = []) => {\r\n    if (subreddits.length === 0) {\r\n      return this.setState({\r\n        filteredPosts: this.state.posts,\r\n        isFiltered: false\r\n      });\r\n    }\r\n    const filtered = this.state.posts.filter(\r\n      filterPostsCallback(searchTerm, subreddits)\r\n    );\r\n    this.setState({\r\n      filteredPosts: filtered,\r\n      loading: false,\r\n      isFiltered: true\r\n    });\r\n  };\r\n\r\n  addToFavourites = (postToAdd: IFavouritePost): void => {\r\n    if (postToAdd.doc_id) {\r\n      return this.removeFromFavourites(postToAdd);\r\n    }\r\n    db.collection('users')\r\n      .doc(this.state.uid)\r\n      .collection('favourites')\r\n      .add(postToAdd)\r\n      .then(docRef => {\r\n        console.log('added', { ...postToAdd, doc_id: docRef.id });\r\n      })\r\n      .catch(function(error) {\r\n        console.error('Error adding document: ', error);\r\n      });\r\n  };\r\n\r\n  removeFromFavourites = (postToRemove: IFavouritePost): void => {\r\n    db.collection('users')\r\n      .doc(this.state.uid)\r\n      .collection('favourites')\r\n      .doc(postToRemove.doc_id)\r\n      .delete();\r\n  };\r\n\r\n  toggleTheme = () => {\r\n    this.setState(currentState => ({\r\n      theme: currentState.theme == darkTheme ? lightTheme : darkTheme,\r\n      themeName: currentState.themeName == 'light' ? 'dark' : 'light'\r\n    }));\r\n  };\r\n\r\n  handleLogout = () => {\r\n    auth.signOut().then(() => {\r\n      console.log('Logged out.');\r\n    });\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    this.setDisplayPreference(this.state.themeName);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      posts,\r\n      filteredPosts,\r\n      isFiltered,\r\n      theme,\r\n      themeName,\r\n      favourites,\r\n      loading,\r\n      isAuthenticated\r\n    } = this.state;\r\n    const { Component, pageProps } = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <ThemeProvider theme={theme}>\r\n          <Component\r\n            {...pageProps}\r\n            posts={isFiltered ? filteredPosts : posts}\r\n            loading={loading}\r\n            onSearchSubmit={this.filterPosts}\r\n            onAddToFavourites={this.addToFavourites}\r\n            favourites={favourites}\r\n            toggleTheme={this.toggleTheme}\r\n            themeName={themeName}\r\n            isAuthenticated={isAuthenticated}\r\n            onLogoutClick={this.handleLogout}\r\n          />\r\n        </ThemeProvider>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyApp;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAmBA;AACA;AAIA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAHA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAyBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AA5EA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AAwDA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;;;;;;;;;AAnKA;AACA;AAAA;AAAA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAnBA;AACA;AAiLA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}